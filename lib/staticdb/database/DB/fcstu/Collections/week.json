{"0":{"title":"PPTP實作","image":"http://www.infraexpert.com/gif/pptp.gif","chtml":"請實作PPTP的結構，使用Java作為伺服器","qhtml":"<div class=\"col-md-6\"><div class=\"panel panel-default\"><div class=\"panel-heading\"><h4 class=\"panel-title\">Question</h4></div><div class=\"panel-body\"><div style=\"float:none;width:100%\"><div class=\"course-quiz-question-text\">請實作以 Java 為伺服端的PPTP </div></div></div></div></div>","anshtml":"<code>package android.net.vpn;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.net.vpn.L2tpProfile;\r\nimport android.net.vpn.L2tpIpsecProfile;\r\nimport android.net.vpn.L2tpIpsecPskProfile;\r\nimport android.net.vpn.PptpProfile;\r\nimport android.net.vpn.VpnManager;\r\nimport android.net.vpn.VpnProfile;\r\nimport android.net.vpn.VpnState;\r\nimport android.net.vpn.VpnType;\r\nimport android.os.ConditionVariable;\r\nimport android.os.Parcel;\r\nimport android.test.AndroidTestCase;\r\nimport android.test.suitebuilder.annotation.SmallTest;\r\nimport android.text.TextUtils;\r\n\r\n/**\r\n * Unit test class to test VPN api\r\n * Use the below command to run the vpn unit test only\r\n * runtest vpntest or\r\n * adb shell am instrument -e class 'com.android.unit_tests.VpnTest'\r\n *   -w com.android.unit_tests/android.test.InstrumentationTestRunner\r\n */\r\npublic class VpnTest extends AndroidTestCase {\r\n    private static final String NAME = \"a name\";\r\n    private static final String SERVER_NAME = \"a server name\";\r\n    private static final String ID = \"some id\";\r\n    private static final String SUFFICES = \"some suffices\";\r\n    private static final String ROUTES = \"some routes\";\r\n    private static final String SAVED_NAME = \"some name\";\r\n\r\n    @Override\r\n    public void setUp() {\r\n    }\r\n\r\n    @Override\r\n    public void tearDown() {\r\n    }\r\n\r\n    @SmallTest\r\n    public void testVpnType() {\r\n        testVpnType(VpnType.L2TP);\r\n        testVpnType(VpnType.L2TP_IPSEC);\r\n        testVpnType(VpnType.L2TP_IPSEC_PSK);\r\n        testVpnType(VpnType.PPTP);\r\n    }\r\n\r\n    @SmallTest\r\n    public void testVpnProfile() {\r\n        VpnState state = VpnState.CONNECTING;\r\n        testVpnProfile(createTestProfile(state), state);\r\n    }\r\n\r\n    @SmallTest\r\n    public void testGetType() {\r\n        assertEquals(VpnType.L2TP, new L2tpProfile().getType());\r\n        assertEquals(VpnType.L2TP_IPSEC, new L2tpIpsecProfile().getType());\r\n        assertEquals(VpnType.L2TP_IPSEC_PSK, \r\n                new L2tpIpsecPskProfile().getType());\r\n        assertEquals(VpnType.PPTP, new PptpProfile().getType());\r\n    }\r\n\r\n    @SmallTest\r\n    public void testVpnTypes() {\r\n        assertTrue(VpnManager.getSupportedVpnTypes().length > 0);\r\n    }\r\n\r\n    @SmallTest\r\n    public void testGetTypeFromManager() {\r\n        VpnManager m = new VpnManager(getContext());\r\n        VpnType[] types = VpnManager.getSupportedVpnTypes();\r\n        for (VpnType t : types) {\r\n            assertEquals(t, m.createVpnProfile(t).getType());\r\n        }\r\n    }\r\n\r\n    @SmallTest\r\n    public void testParcelable() {\r\n        VpnProfile p = createTestProfile(VpnState.CONNECTED);\r\n        Parcel parcel = Parcel.obtain();\r\n        p.writeToParcel(parcel, 0);\r\n        parcel.setDataPosition(0);\r\n\r\n        // VpnState is transient and not saved in the parcel\r\n        testVpnProfile(VpnProfile.CREATOR.createFromParcel(parcel), null);\r\n    }\r\n\r\n    @SmallTest\r\n    public void testReceiver() {\r\n        final String profileName = \"whatever\";\r\n        final VpnState state = VpnState.DISCONNECTING;\r\n        final ConditionVariable cv = new ConditionVariable();\r\n        cv.close();\r\n        BroadcastReceiver r = new BroadcastReceiver() {\r\n            public void onReceive(Context c, Intent i) {\r\n                assertEquals(profileName,\r\n                        i.getStringExtra(VpnManager.BROADCAST_PROFILE_NAME));\r\n                assertEquals(state, i.getSerializableExtra(\r\n                        VpnManager.BROADCAST_CONNECTION_STATE));\r\n                cv.open();\r\n            }\r\n        };\r\n\r\n        VpnManager m = new VpnManager(getContext());\r\n        m.registerConnectivityReceiver(r);\r\n        m.broadcastConnectivity(profileName, state);\r\n\r\n        // fail it if onReceive() doesn't get executed in 5 sec\r\n        assertTrue(cv.block(5000));\r\n    }\r\n\r\n    private void testVpnType(VpnType type) {\r\n        assertFalse(TextUtils.isEmpty(type.getDisplayName()));\r\n        assertNotNull(type.getProfileClass());\r\n    }\r\n\r\n    private VpnProfile createTestProfile(VpnState state) {\r\n        VpnProfile p = new L2tpProfile();\r\n        p.setName(NAME);\r\n        p.setServerName(SERVER_NAME);\r\n        p.setId(ID);\r\n        p.setDomainSuffices(SUFFICES);\r\n        p.setRouteList(ROUTES);\r\n        p.setSavedUsername(SAVED_NAME);\r\n        p.setState(state);\r\n        return p;\r\n    }\r\n\r\n    private void testVpnProfile(VpnProfile p, VpnState state) {\r\n        assertEquals(NAME, p.getName());\r\n        assertEquals(SERVER_NAME, p.getServerName());\r\n        assertEquals(ID, p.getId());\r\n        assertEquals(SUFFICES, p.getDomainSuffices());\r\n        assertEquals(ROUTES, p.getRouteList());\r\n        assertEquals(SAVED_NAME, p.getSavedUsername());\r\n        if (state != null) assertEquals(state, p.getState());\r\n    }\r\n}</code>","openDate":10}}